@using System.Text.Json;
@using PrivateBudget.Client.Models;
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="d-flex bg-body-tertiary position-relative">
    <div class="navbar-brand p-3">
        PrivateBudget
    </div>

    <nav class="d-flex">

        <div class="nav-item">
            <NavLink class="nav-link p-3" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Overview
            </NavLink>
        </div>

        <div class="nav-item">
            <NavLink class="nav-link p-3" href="charts">
                <span class="oi oi-signal" aria-hidden="true"></span> Charts
            </NavLink>
        </div>

        <div class="nav-item">
            <NavLink class="nav-link p-3" href="entries">
                <span class="oi oi-list" aria-hidden="true"></span> Entries
            </NavLink>
        </div>
    </nav>

    <div class="nav-buttons ms-auto d-flex">
        <div class="p-3" aria-label="Export" @onclick="DownloadFileFromStream"><span class="oi oi-data-transfer-download" /></div>
        <div class="p-3" aria-label="Import" onclick="document.getElementById('import').click()"><span class="oi oi-data-transfer-upload" /></div>
        <InputFile id="import" OnChange="Import" hidden></InputFile>
        <div class="p-3" aria-label="Settings" @onclick="NavigateToSettings"><span class="oi oi-cog" /></div>
    </div>
</div>



@code {
    public event Action? UserDataChanged;


    private async void Import(InputFileChangeEventArgs args)
    {
        using var stream = new StreamReader(args.File.OpenReadStream());
        string jsonString = await stream.ReadToEndAsync();

        var userData = JsonSerializer.Deserialize<UserData>(jsonString);
        if (userData != null)
        {
            App.UserData = userData;

            // Update the category references of entries
            foreach (var entry in App.UserData.Plan.Entries)
            {
                foreach (var category in App.UserData.Plan.Categories)
                {
                    if (entry.Category?.Equals(category) ?? true)
                    {
                        entry.Category = category;
                        break;
                    }
                }
            }

            // Update income category reference
            App.UserData.Plan.Categories.Find(x => x?.Equals(App.UserData.Plan.IncomeCategory) ?? true);

            UserDataChanged?.Invoke();
        }
        
    }


    private Stream GetUserDataFileStream(MemoryStream trargetStream)
    {
        string userData = JsonSerializer.Serialize(App.UserData, new JsonSerializerOptions() { WriteIndented = true });
        var writer = new StreamWriter(trargetStream);

        writer.Write(userData);
        writer.Flush();
        trargetStream.Position = 0;

        return trargetStream;
    }


    private async Task DownloadFileFromStream()
    {
        using var stream = new MemoryStream();
        var fileStream = GetUserDataFileStream(stream);
        var fileName = "user-data.json";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }


    private void NavigateToSettings() => Navigation.NavigateTo("settings");
}
