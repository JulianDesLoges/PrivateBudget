@using Microsoft.VisualBasic;
@using PrivateBudget.Client.Models;


<Modal @ref="_modal">
    <Title>Entry</Title>
    <Body>
        <div class="d-flex mb-3" role="group">
            <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" checked="@(_valueSign == "-")" @onclick="HandleValueTypeToggle">
            <label class="btn btn-outline-danger" for="btnradio2">Debit</label>

            <input type="radio" class="btn-check ms-auto" name="btnradio" id="btnradio1" autocomplete="off" checked="@(_valueSign == "+")" @onclick="HandleValueTypeToggle">
            <label class="btn btn-outline-success ms-auto" for="btnradio1">Credit</label>
        </div>


        <form @onsubmit=Save>
            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="name" placeholder="Name" @bind="_currentEntry.Name" />
                <label for="name" class="form-label">Name</label>
            </div>

            <div class="form-floating mb-3">
                <textarea class="form-control" id="description" placeholder="Description" @bind="_currentEntry.Description" />
                <label for="description" class="form-label">Description</label>
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text value-sign">@_valueSign</span>
                <div class="form-floating">
                    <input type="text" class="form-control" id="value" placeholder="Amount" @bind="_valueString" />
                    <label for="value" class="form-label">Amount</label>
                </div>
                <span class="input-group-text">€</span>
            </div>

            <div class="form-floating mb-3">
                <input type="date" class="form-control" id="date" placeholder="Date" @bind="_currentEntry.StartDate" />
                <label for="date" class="form-label">Date</label>
            </div>

            <div class="form-floating mb-3">
                <select class="form-select" aria-label="Default select example" id="category" @bind="_selectedCategoryIndex">
                    @{
                        int i = 0;
                    }
                    @foreach (var category in App.UserData.Plan.Categories)
                    {
                        <option value="@(i++)">@(category?.Name ?? "No category")</option>
                    }
                </select>
                <label for="category" class="form-label">Category</label>
            </div>
        </form>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
        <button type="button" class="btn btn-primary ms-auto" @onclick="Save">Save</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
    </Footer>
</Modal>

@code {
    public event Action<Entry?>? BookingCreated;
    public event Action<Entry?>? BookingModified;
    public event Action<Entry?>? BookingDeleted;

    private Modal? _modal;
    private Entry _currentEntry = new Entry();

    private string _valueSign = "-";
    private string _valueString = "";
    private bool _newEntry = false;

    private int _selectedCategoryIndex;
    private int _selectedIntervalIndex;


    public void Open()
    {
        _newEntry = true;
        Open(new Entry());
    }


    public void Open(Entry entry)
    {
        _currentEntry = entry;


        if (_newEntry)
        {
            _valueSign = "-";
            _valueString = string.Empty;
        }
        else
        {
            _valueSign = entry.Value >= 0 ? "+" : "-";
            _valueString = $"{Math.Abs(entry.Value):0.00}";
        }
        _selectedCategoryIndex = App.UserData.Plan.Categories.IndexOf(_currentEntry.Category);
        _selectedIntervalIndex = Enum.GetValues<BookingInterval>().ToList().IndexOf(_currentEntry.Interval);

        _modal?.Open();
        StateHasChanged();
    }


    private void Close()
    {
        StateHasChanged();
        _newEntry = false;
        _modal?.Close();
    }


    private void UpdateEntry()
    {
        decimal.TryParse(_valueSign + _valueString, out decimal value);
        _currentEntry.Value = value;

        _currentEntry.Category = App.UserData.Plan.Categories[_selectedCategoryIndex];
        _currentEntry.Interval = Enum.GetValues<BookingInterval>()[_selectedIntervalIndex];
    }


    private void Save()
    {
        UpdateEntry();

        if (_newEntry)
        {
            BookingCreated?.Invoke(_currentEntry);
        }
        else
        {
            BookingModified?.Invoke(_currentEntry);
        }

        Close();
    }


    private void Delete()
    {
        UpdateEntry();

        if (!_newEntry)
        {
            BookingDeleted?.Invoke(_currentEntry);
        }
        Close();
    }


    private void HandleValueTypeToggle()
    {
        _valueSign = _valueSign == "+" ? "-" : "+";
        StateHasChanged();
    }
}
