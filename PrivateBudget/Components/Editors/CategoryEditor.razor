@using PrivateBudget.Client.Models;
@using System.Drawing;

<Modal @ref="_modal">
    <Title>Category</Title>
    <Body>
        <form @onsubmit=Save>

            <div class="input-group mb-3">
                <input type="color" class="form-control" id="color" @bind="_currentCategory.Color" />
                <div class="form-floating">
                    <input type="text" class="form-control" id="color-text" @bind="_currentCategory.Color" />
                    <label for="color-text" class="form-label">Color</label>
                </div>
            </div>

            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="name" placeholder="Name" @bind="_currentCategory.Name" />
                <label for="name">Name</label>
            </div>

            <div class="input-group mb-3">
                <div class="form-floating">
                    <input type="text" class="form-control" id="value" placeholder="Monthly budget" @bind="_currentCategory.MonthlyBudget" />
                    <label for="value">Monthly budget</label>
                </div>
                <span class="input-group-text">€</span>
            </div>

        </form>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
        <button type="button" class="btn btn-primary ms-auto" @onclick="Save">Save</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
    </Footer>
</Modal>

@code {
    public event Action<Category?>? CategoryCreated;
    public event Action<Category?>? CategoryModified;
    public event Action<Category?>? CategoryDeleted;

    private Modal? _modal;
    private Category? _currentCategory = new Category();

    private bool _newCategory = false;


    public void Open()
    {
        _newCategory = true;
        Open(new Category());
    }


    public void Open(Category? category)
    {
        _currentCategory = category;

        _modal?.Open();
        StateHasChanged();
    }


    private void Close()
    {
        StateHasChanged();
        _newCategory = false;
        _modal?.Close();
    }


    private void Save()
    {
        if (_newCategory)
        {
            CategoryCreated?.Invoke(_currentCategory);
        }
        else
        {
            CategoryModified?.Invoke(_currentCategory);
        }

        Close();
    }


    private void Delete()
    {
        if (!_newCategory)
        {
            CategoryDeleted?.Invoke(_currentCategory);
        }
        Close();
    }
}
