@using PrivateBudget.Client.Models;
@using PrivateBudget.Components.Editors

<BookingEditor @ref="_bookingEditor"></BookingEditor>

<div class="card">
    <div class="card-header hstack">
        <div>Monthly bookings</div>
        <div class="btn btn-outline-primary ms-auto" @onclick="() => _bookingEditor?.Open()">+</div>
    </div>
    <div class="card-body">
        <div class="container mb-5">
            <div class="row align-items-center">
                <div class="col-xxl-5">
                    <MonthSelect Start="_firstDate" End="_lastDate" Disabled="false" @ref="_monthSelect" />
                </div>
            </div>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Name</th>
                    <th scope="col">Value</th>
                    <th scope="col">Category</th>
                    <th scope="col">Description</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var booking in CurrentBookingMonth.Bookings.OrderBy(x => x.Date))
                {
                    <tr>
                        <td>@booking.Date</td>
                        <td>@booking.Name</td>
                        <td><ColoredCurrencyComponent CurrencySymbol="'€'" Value="@booking.Value" /></td>
                        <td><CategoryComponent Category="@booking.Category" /></td>
                        <td>@booking.Description</td>
                    </tr>
                }

                <tr style="border:transparent;">
                    <td><strong>Net</strong></td>
                    <td></td>
                    <td><ColoredCurrencyComponent CurrencySymbol="'€'" Value="@CurrentBookingMonth.Net"></ColoredCurrencyComponent></td>
                    <td></td>
                    <td></td>
                </tr>

                <tr style="border:transparent;">
                    <td><strong>Total</strong></td>
                    <td></td>
                    <td><ColoredCurrencyComponent CurrencySymbol="'€'" Value="@_total"></ColoredCurrencyComponent></td>
                    <td></td>
                    <td></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@code {

    [Parameter]
    public Plan? Plan { get; set; }

    private BookingEditor? _bookingEditor;
    private MonthSelect? _monthSelect;


    private DateOnly _firstDate;
    private DateOnly _lastDate;

    private Dictionary<DateOnly, BookingMonth> _bookingMonths = new Dictionary<DateOnly, BookingMonth>();

    private BookingMonth CurrentBookingMonth { get; set; } = new BookingMonth(new DateOnly());


    private decimal _total;


    protected override void OnInitialized()
    {
        if (Plan == null)
        {
            throw new NullReferenceException("Plan is null.");
        }

        if (Plan.Entries.Count > 0)
        {
            _firstDate = Plan.Entries.OrderBy(x => x.StartDate).First().StartDate;
            _lastDate = DateOnly.FromDateTime(DateTime.Now.AddMonths(1));
        }
        else
        {
            _firstDate = DateOnly.FromDateTime(DateTime.Now);
            _lastDate = _firstDate;
        }

        _firstDate = new DateOnly(_firstDate.Year, _firstDate.Month, 1);
        _lastDate = new DateOnly(_lastDate.Year, _lastDate.Month, 1);

        GenerateBookingMonths();

        var currentDate = DateOnly.FromDateTime(DateTime.Now);
        currentDate = new DateOnly(currentDate.Year, currentDate.Month, 1);

        CurrentBookingMonth = _bookingMonths[currentDate];
        _total = CalculateTotal(currentDate);
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (_monthSelect == null)
            {
                throw new NullReferenceException("_monthSelect is null.");
            }

            if (_bookingEditor == null)
            {
                throw new NullReferenceException("_bookingEditor is null.");
            }

            _bookingEditor.BookingCreated += BookingCreated;
            _bookingEditor.BookingModified += BookingModified;
            _bookingEditor.BookingDeleted += BookingDeleted;


            _monthSelect.DateChanged += DateChanged;
            StateHasChanged();
        }
    }


    private void DateChanged() 
    {
        if (_monthSelect == null)
        {
            throw new NullReferenceException("_monthSelect is null.");
        }

        CurrentBookingMonth = _bookingMonths[_monthSelect.Value];


        _total = CalculateTotal(_monthSelect.Value);

        StateHasChanged();
    }


    private void GenerateBookingMonths()
    {
        _bookingMonths.Clear();


        // Create empty booking month for each month
        foreach (var month in EnumerateAvailableMonths())
        {
            _bookingMonths.Add(month, new BookingMonth(month));
        }


        // Iterate over all entries and create bookings for each month
        foreach (var entry in Plan.Entries)
        {
            foreach (var month in EnumerateAvailableMonths())
            {
                if (entry.HappensThisMonth(month))
                {
                    _bookingMonths[month].AddBooking(new Booking(entry, month.Month, month.Year));
                }
            }
        }

    }


    private decimal CalculateTotal(DateOnly until)
    {
        decimal total = 0;

        foreach (var month in EnumerateAvailableMonths())
        {
            if (month <= until)
            {
                total += _bookingMonths[month].Net;
            }
            else
            {
                return total;
            }
        }

        return total;
    }


    private IEnumerable<DateOnly> EnumerateAvailableMonths()
    {
        var end = new DateOnly(_lastDate.Year, _lastDate.Month, 1);
        var current = new DateOnly(_firstDate.Year, _firstDate.Month, 1);

        while (current <= end)
        {
            yield return current;
            current = current.AddMonths(1);
        }
    }

    private void BookingCreated(Entry? entry)
    {
        if (entry != null)
        {
            Plan.Entries.Add(entry);

            GenerateBookingMonths();
            _total = CalculateTotal(_monthSelect.Value);
            StateHasChanged();

        }
    }


    private void BookingModified(Entry? entry)
    {
        GenerateBookingMonths();
        _total = CalculateTotal(_monthSelect.Value);
        StateHasChanged();
    }


    private void BookingDeleted(Entry? entry)
    {
        if (entry != null)
        {
            Plan.Entries.Remove(entry);

            GenerateBookingMonths();
            _total = CalculateTotal(_monthSelect.Value);
            StateHasChanged();
        }
    }
}
