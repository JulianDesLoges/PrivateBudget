<div class="input-group">
    <button class="btn btn-outline-secondary" disabled="@Disabled" @onclick="MonthLeft"><span class="oi oi-chevron-left"></span></button>

    <div class="form-floating">
        <select class="form-select" aria-label="Month Select" id="month-select" @bind="Month" disabled="@Disabled">
                @foreach (var month in _currentMonths)
                {
                    <option value="@month.Key">@month.Value</option>
                }
        </select>
        <label for="month-selct">Month</label>
    </div>

    <div class="form-floating">
        <select class="form-select" aria-label="Year Select" id="year-select" @bind="Year" disabled="@Disabled">
            @foreach (var year in _availableYears)
            {
                        <option value="@year">@year</option>
            }
        </select>
        <label for="year-selct">Year</label>
    </div>

    <button class="btn btn-outline-secondary" disabled="@Disabled" @onclick="MonthRight"><span class="oi oi-chevron-right"></span></button>
</div>

@code {
    public event Action? DateChanged;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public DateOnly Start { get; set; }

    [Parameter]
    public DateOnly End { get; set; }




    public DateOnly Value { get; set; } = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1);


    public IReadOnlyDictionary<int, string> MONTHS = new Dictionary<int, string>()
    {
        { 1, "January" },
        { 2, "February" },
        { 3, "March" },
        { 4, "April" },
        { 5, "May" },
        { 6, "June" },
        { 7, "July" },
        { 8, "August" },
        { 9, "Septemper" },
        { 10, "October" },
        { 11, "November" },
        { 12, "December" }
    };

    private List<int> _availableYears = new List<int>();
    private Dictionary<int, string> _currentMonths = new Dictionary<int, string>();


    private int Year {
        get => Value.Year;
        set
        {
            Value = new DateOnly(value, Value.Month, 1);
            HandleDateChanged();
        }
    }

    private int Month
    {
        get => Value.Month;
        set
        {
            Value = new DateOnly(Value.Year, value, 1);
            HandleDateChanged();
        }
    }


    protected override void OnInitialized()
    {
        _availableYears.Clear();

        for (int i = Start.Year; i <= End.Year; i++)
        {
            _availableYears.Add(i);
        }

        Value = new DateOnly(Value.Year, Value.Month, 1);
        UpdateAvailableMonths();
    }


    private void HandleDateChanged()
    {
        UpdateAvailableMonths();
        DateChanged?.Invoke();
    }


    private void MonthLeft()
    {
        if (Value.AddMonths(-1) >= new DateOnly(Start.Year, Start.Month, 1))
        {
            Value = Value.AddMonths(-1);
            HandleDateChanged();
        }
    }


    private void MonthRight()
    {
        if (Value.AddMonths(1) < End)
        {
            Value = Value.AddMonths(1);
            HandleDateChanged();
        }
    }



    private void UpdateAvailableMonths()
    {
        int firstMonth = 1;
        int lastMonth = 12;
        int selectedMonth = Month;

        if (Year == Start.Year)
        {
            firstMonth = Start.Month;
            selectedMonth = selectedMonth < firstMonth ? firstMonth : selectedMonth;
        }

        if (Year == End.Year)
        {
            lastMonth = End.Month;
            selectedMonth = selectedMonth > lastMonth ? lastMonth : selectedMonth;
        }

        Value = new DateOnly(Year, selectedMonth, 1);
        _currentMonths.Clear();


        for (int i = firstMonth; i <= lastMonth; i++)
        {
            _currentMonths.Add(i, MONTHS[i]);
        }

        StateHasChanged();
    }
}
