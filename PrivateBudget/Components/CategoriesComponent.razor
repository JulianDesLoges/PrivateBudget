@using PrivateBudget.Client.Models;
@using PrivateBudget.Components.Editors;

<CategoryEditor @ref="_categoryEditor" />

<div class="card">
    <div class="card-header hstack">
        <div>Categories</div>
        <div class="btn btn-outline-primary ms-auto" @onclick="() => _categoryEditor?.Open()">+</div>
    </div>
    <div class="card-body">
        <div class="form-floating mb-3">
            <select class="form-select" aria-label="Default select example" id="income-category" @bind="SelectedIncomeCategoryIndex">
                @{int i = 0;}
                @foreach (var category in Plan.Categories)
                {
                    <option value="@i">@(category?.Name ?? "no category")</option>
                    i++;
                }
            </select>
            <label for="income-category">Income category</label>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Category</th>
                    <th scope="col">Monthly budget</th>
                    <th scope="col"></th>
                </tr>
            </thead>

            <tbody>
                @foreach (var category in Plan.Categories)
                {
                    if (category != null)
                    {
                        <tr>
                            <td><CategoryComponent Category="@category" /></td>
                            <td class="value">@(category.MonthlyBudget?.ToString("0.00 €") ?? "no budget")</td>
                            <td>
                                <span class="oi oi-pencil" @onclick="() => _categoryEditor?.Open(category)" />
                            </td>
                            <td>
                                <span class="oi oi-trash" @onclick="() => CategoryDeleted(category)" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        @if (Plan.Categories.Count <= 1)
        {
            <div style="text-align:center">No categories</div>
        }
    </div>
</div>




@code {
    public event Action? CategoriesChanged;

    [Parameter]
    public Plan Plan { get; set; } = new Plan();


    private CategoryEditor? _categoryEditor;

    private int SelectedIncomeCategoryIndex
    {
        get => Plan.Categories.IndexOf(Plan.IncomeCategory);
        set => Plan.IncomeCategory = Plan.Categories[value];
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (_categoryEditor == null)
            {
                throw new NullReferenceException("_categoryEditor is null.");
            }

            _categoryEditor.CategoryCreated += CategoryCreated;
            _categoryEditor.CategoryModified += CategoryModified;
        }

        SelectedIncomeCategoryIndex = Plan.Categories.IndexOf(Plan.IncomeCategory);
    }


    private void CategoryCreated(Category? category)
    {
        if (category != null)
        {
            Plan.Categories.Add(category);
            StateHasChanged();
            CategoriesChanged?.Invoke();
        }
    }


    private void CategoryModified(Category? category)
    {
        StateHasChanged();
        CategoriesChanged?.Invoke();
    }


    private void CategoryDeleted(Category? category)
    {
        if (category != null)
        {
            Plan.Categories.Remove(category);
            StateHasChanged();
            CategoriesChanged?.Invoke();
        }
    }


    public void UpdateState() => StateHasChanged();



    private void IncomeCategoryChanged() => Plan.IncomeCategory = Plan.Categories[SelectedIncomeCategoryIndex];
}
