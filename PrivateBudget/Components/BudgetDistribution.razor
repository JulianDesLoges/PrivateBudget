@using System.Text.Json;
@using PrivateBudget.Client.Models;
@inject IJSRuntime JS

<div class="card">
    <div class="card-header hstack">
        <div>Budget Distribution</div>
    </div>
    <div class="card-body d-flex">

        @if (IncomeCategory == null)
        {
            <div>No income category set.</div>
        }
        else
        {
            <canvas width="600" height="600" id="budget-donut" class="me-5"></canvas>


            

            <ul class="list-group list-group-flush justify-content-center">
                <li class="list-group-item d-flex justify-content-between" style="border-bottom:none">
                    <div>Total available</div>
                    <ColoredCurrencyComponent CurrencySymbol="'€'" Value="@IncomeCategory.MonthlyBudget"></ColoredCurrencyComponent>
                </li>
                <li class="list-group-item d-flex justify-content-between mb-5" style="border-bottom:none">
                    <div>Total unused</div>
                    <ColoredCurrencyComponent CurrencySymbol="'€'" Value="@_totalUnused"></ColoredCurrencyComponent>
                </li>

                @foreach (var category in Categories?.Skip(1).OrderByDescending(x => x.MonthlyBudget))
                {
                    if (category.Name != IncomeCategory?.Name && category.MonthlyBudget != null)
                    {
                        <li class="list-group-item d-flex justify-content-between">
                            <CategoryComponent Category="@category" />
                            <ColoredCurrencyComponent CurrencySymbol="'€'" Value="@category.MonthlyBudget" />
                        </li>
                    }
                }
            </ul>
        }


    </div>
</div>

@code {
    [Parameter]
    public List<Category>? Categories { get; set; }

    [Parameter]
    public Category? IncomeCategory { get; set; }


    private decimal _totalUnused;

    protected override void OnInitialized()
    {
        if (IncomeCategory == null) { return; }
        if (IncomeCategory.MonthlyBudget == null) { return; }
        if (Categories == null) { return; }

        _totalUnused = (decimal)IncomeCategory.MonthlyBudget;


        foreach (var category in Categories.Skip(1))
        {
            if (category.Name != IncomeCategory?.Name)
            {
                if (category.MonthlyBudget != null)
                {
                    _totalUnused -= (decimal)category.MonthlyBudget;
                }
            }
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (Categories == null)
        {
            throw new NullReferenceException("Categories is null.");
        }

        if (IncomeCategory != null)
        {
            decimal totalIncome = IncomeCategory?.MonthlyBudget ?? 1;
            var dict = new Dictionary<string, decimal>();


            foreach (var category in Categories.Skip(1))
            {
                if (category.Name != IncomeCategory?.Name)
                {
                    if (category.MonthlyBudget != null)
                    {
                        dict.Add(category.Color, (decimal)category.MonthlyBudget / totalIncome);
                    }
                }
            }


            dict = dict.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, y => y.Value);

            await JS.InvokeVoidAsync(
                "createDonutChart",
                "#budget-donut",
                0.3,
                JsonSerializer.Serialize(dict)
            );
        }
    }
}
